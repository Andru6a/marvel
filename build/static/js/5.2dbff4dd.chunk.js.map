{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/pages/SingleComicPage.js"],"names":["ErrorMesage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","item","_item$textObjects$","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","res","results","map","getCharacter","getAllComics","getComic","View","_ref","comic","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComic","onComicLoaded","then","errorMessage","spinner","Spinner","content","_Fragment"],"mappings":"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","file":"static/js/5.2dbff4dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMesage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\"/>\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}\r\n        src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMesage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=64e87f61f8b009b9b44a4206749f6d05\";\r\n  const _baseOffset = 220;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}\r\n    `);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics/${id}?${_apiKey}\r\n    `);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (item) => {\r\n    return {\r\n      id: item.id,\r\n      title: item.title,\r\n      thumbnail: item.thumbnail.path + \".\" + item.thumbnail.extension,\r\n      price: item.prices[0].price\r\n        ? `${item.prices[0].price}$`\r\n        : `not available`,\r\n      description: item.description || \"There is no description\",\r\n      pageCount: item.pageCount\r\n        ? `${item.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      language: item.textObjects[0]?.language || \"en-us\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n  return {loading, request, error, clearError}\r\n};\r\n","import { useParams, Link } from \"react-router-dom\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMesage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./singleComicPage.scss\";\r\n\r\nconst SingleComicPage = () => {\r\n  const { comicId } = useParams();\r\n  const [comic, setComic] = useState(null);\r\n  const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateComic();\r\n  }, [comicId]);\r\n\r\n  const onComicLoaded = (comic) => {\r\n    setComic(comic);\r\n  };\r\n\r\n  const updateComic = () => {\r\n    clearError();\r\n    getComic(comicId).then(onComicLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMesage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n  return (\r\n    <>\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ comic }) => {\r\n  const { title, description, pageCount, thumbnail, price, language } = comic;\r\n  return (\r\n    <div className=\"single-comic\">\r\n      <img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n      <div className=\"single-comic__info\">\r\n        <h2 className=\"single-comic__name\">{title}</h2>\r\n        <p className=\"single-comic__descr\">{description}</p>\r\n        <p className=\"single-comic__descr\">{pageCount}</p>\r\n        <p className=\"single-comic__descr\">language:{language}</p>\r\n        <div className=\"single-comic__price\">{price}</div>\r\n      </div>\r\n      <Link to=\"/comics\" className=\"single-comic__back\">\r\n        Back to all\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleComicPage;\r\n"],"sourceRoot":""}