{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charFind/CharFind.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","loading","request","error","clearError","useHttp","setLoading","useState","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","item","_item$textObjects$","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","res","results","map","getCharacter","getAllComics","getComic","getCharacterByName","View","_ref","_jsxs","className","children","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharsLoaded","finally","newCharList","ended","addChar","index","setTimeout","itemRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","arr","i","imgStyle","CSSTransition","timeout","classNames","ref","el","onCharSelected","onKeyDown","key","tabIndex","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","comicUrl","resourceURI","CharInfo","charId","skeleton","_ref3","oneChar","color","Link","to","type","CharForm","setNameChar","charNotFind","ErrorMesage","Formik","initialValues","text","validationSchema","Yup","required","onSubmit","value","setSubmitting","_ref2","isSubmitting","Form","htmlFor","Field","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selecedChar","Helmet","CharFind"],"mappings":"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","file":"static/js/5.d9b0bf5b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\"/>\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}\r\n        src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=64e87f61f8b009b9b44a4206749f6d05\";\r\n  const _baseOffset = 220;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    if(!char) {\r\n      const error = 'The character was not found. Check the name and try again'\r\n      return error;\r\n    }\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}\r\n    `);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics/${id}?${_apiKey}\r\n    `);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (item) => {\r\n    return {\r\n      id: item.id,\r\n      title: item.title,\r\n      thumbnail: item.thumbnail.path + \".\" + item.thumbnail.extension,\r\n      price: item.prices[0].price\r\n        ? `${item.prices[0].price}$`\r\n        : `not available`,\r\n      description: item.description || \"There is no description\",\r\n      pageCount: item.pageCount\r\n        ? `${item.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      language: item.textObjects[0]?.language || \"en-us\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n  return {loading, request, error, clearError}\r\n};\r\n","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\n\r\nimport \"./randomChar.scss\";\r\nimport mjolnir from \"../../resources/img/mjolnir.png\";\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState({});\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, []);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button className=\"button button__main\" onClick={updateChar}>\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = char;\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"Random character\"\r\n        className=\"randomchar__img\"\r\n        style={\r\n          thumbnail ===\r\n          \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n            ? { objectFit: \"contain\" }\r\n            : {}\r\n        }\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"button button__main\">\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a href={wiki} className=\"button button__secondary\">\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n    // window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      // window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (newItemLoading && !loading) {\r\n      onRequest(offset);\r\n    }\r\n  }, [newItemLoading]);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset)\r\n      .then(onCharsLoaded)\r\n      .finally(() => setNewItemLoading(false));\r\n  };\r\n\r\n  const onCharsLoaded = (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    const addChar = (index) => {\r\n      if (index < newCharList.length) {\r\n        setCharList((charList) => [...charList, newCharList[index]]);\r\n        setTimeout(() => addChar(index + 1), 100);\r\n      } else {\r\n        setOffset((offset) => offset + newCharList.length);\r\n        setCharEnded(ended);\r\n      }\r\n    };\r\n    addChar(0);\r\n  };\r\n\r\n  // const onScroll = () => {\r\n  //   if (newItemLoading) return;\r\n  //   if (charEnded) {\r\n  //     window.removeEventListener('scoll', onScroll);\r\n  //   }\r\n  //   if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\r\n  //     // onCharListLoading();\r\n  //     setNewItemLoading(true);\r\n  //   }\r\n  // };\r\n\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach((item) => {\r\n      item.classList.remove('char__item_selected');\r\n    });\r\n    itemRefs.current[id].classList.add('char__item_selected');\r\n    itemRefs.current[id].focus();\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: 'cover' };\r\n      if (\r\n        item.thumbnail ===\r\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\r\n      ) {\r\n        imgStyle = { objectFit: 'unset' };\r\n      }\r\n\r\n      return (\r\n        <CSSTransition timeout={500} classNames=\"char__item\" key={item.id}>\r\n          <li\r\n            className=\"char__item\"\r\n            key={item.id}\r\n            ref={(el) => (itemRefs.current[i] = el)}\r\n            onClick={() => {\r\n              props.onCharSelected(item.id);\r\n              focusOnItem(i);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === ' ' || e.key === 'Enter') {\r\n                props.onCharSelected(item.id);\r\n                focusOnItem(i);\r\n              }\r\n            }}\r\n            tabIndex={0}\r\n          >\r\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n            <div className=\"char__name\">{item.name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return (\r\n      <TransitionGroup component={'ul'} className=\"char__grid\">\r\n        {items}\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n\r\n  const items = renderItems(charList);\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {errorMessage}\r\n      {spinner}\r\n      {items}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        style={{ display: charEnded ? 'none' : 'block' }}\r\n        onClick={() => setNewItemLoading(true)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../skeleton/Skeleton\";\r\n\r\nimport \"./charInfo.scss\";\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { error, getCharacter, clearError } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n  }, [props.charId]);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n    setLoading(false);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    clearError();\r\n    getCharacter(charId).then(onCharLoaded);\r\n  };\r\n\r\n  const skeleton = char || loading || error ? null : <Skeleton />;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {skeleton}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ char }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n\r\n  let imgStyle = { objectFit: \"cover\" };\r\n  if (\r\n    thumbnail ===\r\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\r\n  ) {\r\n    imgStyle = { objectFit: \"unset\" };\r\n  }\r\n\r\n  if (comics.length === 0) {\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"button button__main\">\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length > 0 ? null : \"Comics not found\"}\r\n        {comics.map((item, i) => {\r\n          const comicUrl = item.resourceURI.slice(-5);\r\n          // eslint-disable-next-line\r\n          if (i > 9) return;\r\n          return (\r\n            <li key={i} className=\"char__comics-item\">\r\n              <a href={`/marvel/comics/${comicUrl}`}>{item.name}</a>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport ErrorMesage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charFind.scss';\r\n\r\nconst CharForm = () => {\r\n  const [oneChar, setNameChar] = useState(null);\r\n  const { error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const charNotFind =\r\n    typeof oneChar === 'string' ? (\r\n      <div className=\"char__form-info\">{oneChar}</div>\r\n    ) : null;\r\n  const errorMessage = error && !charNotFind ? <ErrorMesage /> : null;\r\n  const content = oneChar && !charNotFind ? <View oneChar={oneChar} /> : null;\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ text: '' }}\r\n      validationSchema={Yup.object({\r\n        text: Yup.string().required('This field is required'),\r\n      })}\r\n      onSubmit={async (value, { setSubmitting }) => {\r\n        clearError();\r\n        await getCharacterByName(value.text).then((char) => setNameChar(char));\r\n        setSubmitting(false);\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form className=\"char__form\">\r\n          <label className=\"char__form-text\" htmlFor=\"text\">\r\n            Or find a character by name:\r\n          </label>\r\n          <Field\r\n            className=\"char__form-field\"\r\n            type=\"text\"\r\n            name=\"text\"\r\n            placeholder=\"Enter name\"\r\n          />\r\n          <button\r\n            className=\"char__form-button button button__main\"\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n          >\r\n            <div className=\"inner\">Find</div>\r\n          </button>\r\n          <FormikErrorMessage\r\n            className=\"char__form-info\"\r\n            name=\"text\"\r\n            component=\"div\"\r\n          />\r\n          {errorMessage ? (\r\n            <div style={{ 'margin-top': '10px' }}>{errorMessage}</div>\r\n          ) : null}\r\n          {charNotFind}\r\n          {content}\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nconst View = ({ oneChar }) => {\r\n  const { name, id } = oneChar;\r\n\r\n  return (\r\n    <div className=\"char__form-info\">\r\n      <p style={{ color: '#03710E' }}>There is! Visit {name} page?</p>\r\n      <Link to={`/marvel/character/${id}`}>\r\n        <div className=\"button button__secondary\" type=\"submit\">\r\n          <div className=\"inner\">TO PAGE</div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharFind from '../charFind/CharFind';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nconst MainPage = () => {\r\n  const [selecedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div className=\"sticky\">\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selecedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharFind />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}