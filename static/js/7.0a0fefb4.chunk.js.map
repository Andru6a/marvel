{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","request","clearError","process","setProcess","useHttp","useState","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","item","_item$textObjects$","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","res","data","results","map","getCharacter","getAllComics","getComic","getCharacterByName","AppBanner","_jsxs","className","children","avengers","avengersLogo","setContent","Component","newItemLoading","Spinner","ComicsList","props","comicsList","setComicsList","setNewItemLoading","setOffset","comicsEnded","setComicsEnded","useEffect","onRequest","initial","then","onComicsLoaded","newComicsList","ended","addChar","index","setTimeout","arr","i","imgStyle","CSSTransition","timeout","classNames","Link","to","TransitionGroup","component","renderItems","onClick","disabled","ComicsPage","_Fragment","Helmet","content"],"mappings":"iGAAe,UAA0B,kC,OCU1BA,IARMA,IAGbC,aADA,CACA,OAAKC,MAAO,CAACC,QAAS,QAASC,MAAO,QAASC,OAAQ,QAASC,UAAW,UAAWC,OAAQ,UAC9FC,IAAKC,EAAKC,IAAI,W,2CC4EPC,IAhFUA,KACvB,MAAM,QAAEC,EAAO,WAAEC,EAAU,QAAEC,EAAO,WAAEC,GCDjBC,MACrB,MAAOF,EAASC,GAAcE,mBAAS,WAgCvC,MAAO,CAAEL,QA9BOM,uBACdC,eACEC,GAII,IAHJC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MACTG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACPI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAE,eAAgB,oBAE5BP,EAAW,WAEX,IACE,MAAMY,QAAiBC,MAAMR,EAAK,CAAEC,SAAQI,OAAMC,YAElD,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,cAAAW,OAAaJ,EAASK,SAI9D,aADmBL,EAASM,OAE5B,MAAOC,GAEP,MADAnB,EAAW,SACLmB,KAGV,IAOgBrB,WAJCK,uBAAY,KAC7BH,EAAW,aACV,IAE2BD,UAASC,eDhCcC,GAE/CmB,EAAW,4CACXC,EAAU,0CACVC,EAAc,IAmBdC,EAAuBC,IACpB,CACLC,GAAID,EAAKC,GACTC,KAAMF,EAAKE,KACXC,YAAaH,EAAKG,YAAW,GAAAX,OACtBQ,EAAKG,YAAYC,MAAM,EAAG,KAAI,OACjC,6CACJC,UAAWL,EAAKK,UAAUC,KAAO,IAAMN,EAAKK,UAAUE,UACtDC,SAAUR,EAAKS,KAAK,GAAG5B,IACvB6B,KAAMV,EAAKS,KAAK,GAAG5B,IACnB8B,OAAQX,EAAKW,OAAOC,QAkBlBC,EAAoBC,IAAU,IAADC,EACjC,MAAO,CACLd,GAAIa,EAAKb,GACTe,MAAOF,EAAKE,MACZX,UAAWS,EAAKT,UAAUC,KAAO,IAAMQ,EAAKT,UAAUE,UACtDU,MAAOH,EAAKI,OAAO,GAAGD,MAAK,GAAAzB,OACpBsB,EAAKI,OAAO,GAAGD,MAAK,qBAE3Bd,YAAaW,EAAKX,aAAe,0BACjCgB,UAAWL,EAAKK,UAAS,GAAA3B,OAClBsB,EAAKK,UAAS,OACjB,2CACJC,UAA6B,QAAnBL,EAAAD,EAAKO,YAAY,UAAE,IAAAN,OAAA,EAAnBA,EAAqBK,WAAY,UAI/C,MAAO,CACLE,iBA9DuB1C,iBAAiC,IAA1B2C,EAAMxC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGe,EACvC,MAAM0B,QAAYnD,EAAQ,GAADmB,OACpBI,EAAQ,8BAAAJ,OAA6B+B,EAAM,KAAA/B,OAAIK,IAEpD,OAAO2B,EAAIC,KAAKC,QAAQC,IAAI5B,IA2D5B6B,aAxDmBhD,UACnB,MAAM4C,QAAYnD,EAAQ,GAADmB,OAAII,EAAQ,eAAAJ,OAAcS,EAAE,KAAAT,OAAIK,IACzD,OAAOE,EAAoByB,EAAIC,KAAKC,QAAQ,KAuD5CpD,aACAC,UACAC,aACAqD,aApCmBjD,iBAAiC,IAA1B2C,EAAMxC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGe,EACnC,MAAM0B,QAAYnD,EAAQ,SAADmB,OACvBI,EAAQ,2BAAAJ,OAA0B+B,EAAM,KAAA/B,OAAIK,EAAO,WAErD,OAAO2B,EAAIC,KAAKC,QAAQC,IAAId,IAiC5BiB,SA9BelD,UACf,MAAM4C,QAAYnD,EAAQ,SAADmB,OACvBI,EAAQ,YAAAJ,OAAWS,EAAE,KAAAT,OAAIK,EAAO,WAElC,OAAOgB,EAAiBW,EAAIC,KAAKC,QAAQ,KA2BzCK,mBAzDyBnD,gBACPP,EAAQ,GAADmB,OAAII,EAAQ,oBAAAJ,OAAmBU,EAAI,KAAAV,OAAIK,KACrD4B,KAAKC,QAAQC,IAAI5B,M,+DEvBjB,MAA0B,qCCA1B,MAA0B,0C,OCiB1BiC,IAbGA,IAEVC,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC7BzE,cAAA,OAAKO,IAAKmE,EAAUjE,IAAI,aACxB8D,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAAC,yBACRzE,cAAA,SAAK,iBAG/BA,cAAA,OAAKO,IAAKoE,EAAclE,IAAI,sB,6ICFxC,MAAMmE,EAAaA,CAAC/D,EAASgE,EAAWC,KACtC,OAAQjE,GACN,IAAK,UACH,OAAOb,cAAC+E,IAAO,IACjB,IAAK,UACH,OAAOD,EAAiB9E,cAAC6E,EAAS,IAAM7E,cAAC+E,IAAO,IAClD,IAAK,YACH,OAAO/E,cAAC6E,EAAS,IACnB,IAAK,QACH,OAAO7E,cAACD,IAAY,IACtB,QACE,MAAM,IAAI8B,MAAM,8BA8FPmD,MA1FKC,IAClB,MAAOC,EAAYC,GAAiBnE,mBAAS,KACtC8D,EAAgBM,GAAqBpE,oBAAS,IAC9C6C,EAAQwB,GAAarE,mBAAS,MAC9BsE,EAAaC,GAAkBvE,oBAAS,IAEzC,aAAEmD,EAAY,QAAEtD,EAAO,WAAEC,GAAeJ,cAE9C8E,qBAAU,KACRC,EAAU5B,GAAQ,KAGjB,IAEH,MAAM4B,EAAYA,CAAC5B,EAAQ6B,KACfN,GAAVM,GACAvB,EAAaN,GACV8B,KAAKC,GACLD,MAAK,IAAM7E,EAAW,gBAGrB8E,EAAkBC,IACtB,IAAIC,GAAQ,EACRD,EAAcvE,OAAS,IACzBwE,GAAQ,GAGV,MAAMC,EAAWC,IACXA,EAAQH,EAAcvE,QACxB6D,GAAeD,GAAe,IAAIA,EAAYW,EAAcG,MAC5DC,YAAW,IAAMF,EAAQC,EAAQ,IAAI,OAErCX,GAAWxB,GAAWA,EAASgC,EAAcvE,SAC7C8D,GAAkB,GAClBG,EAAeO,KAInBC,EAAQ,IAoCV,OACExB,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC1BG,EAAW/D,GAAS,IAnCzB,SAAqBqF,GACnB,MAAMhD,EAAQgD,EAAIjC,KAAI,CAACb,EAAM+C,KAC3B,IAAIC,EAAW,CAAE/F,UAAW,SAO5B,MAJE,wEADA+C,EAAKT,YAGLyD,EAAW,CAAE/F,UAAW,UAGxBL,cAACqG,IAAa,CAACC,QAAS,IAAKC,WAAW,eAAc9B,SACpDzE,cAAA,MAAIwE,UAAU,eAAcC,SAC1BF,eAACiC,IAAI,CAACC,GAAE,kBAAA3E,OAAoBsB,EAAKb,IAAKkC,SAAA,CACpCzE,cAAA,OACEO,IAAK6C,EAAKT,UACVlC,IAAK2C,EAAKE,MACVkB,UAAU,mBACVvE,MAAOmG,IAETpG,cAAA,OAAKwE,UAAU,oBAAmBC,SAAErB,EAAKE,QACzCtD,cAAA,OAAKwE,UAAU,qBAAoBC,SAAErB,EAAKG,YATZ4C,IADwBA,MAgBhE,OACEnG,cAAC0G,IAAe,CAACC,UAAW,KAAMnC,UAAU,eAAcC,SACvDvB,IAOwB0D,CAAY1B,IAAaJ,GAEpD9E,cAAA,UACEwE,UAAU,mCACVqC,QAASA,IAAMpB,EAAU5B,GACzBiD,SAAUhC,EACV7E,MAAO,CAAEC,QAASoF,EAAc,OAAS,SAAUb,SAEnDzE,cAAA,OAAKwE,UAAU,QAAOC,SAAC,oB,QC3FhBsC,UAbIA,IAEfxC,eAAAyC,WAAA,CAAAvC,SAAA,CACAF,eAAC0C,IAAM,CAAAxC,SAAA,CACHzE,cAAA,QAAMwC,KAAK,cAAc0E,QAAQ,iCACjClH,cAAA,SAAAyE,SAAO,mBAETzE,cAACsE,IAAS,IACVtE,cAACgF,EAAU","file":"static/js/7.0a0fefb4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\"/>\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}\r\n        src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=64e87f61f8b009b9b44a4206749f6d05';\r\n  const _baseOffset = 220;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}\r\n    `);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics/${id}?${_apiKey}\r\n    `);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (item) => {\r\n    return {\r\n      id: item.id,\r\n      title: item.title,\r\n      thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension,\r\n      price: item.prices[0].price\r\n        ? `${item.prices[0].price}$`\r\n        : `not available`,\r\n      description: item.description || 'There is no description',\r\n      pageCount: item.pageCount\r\n        ? `${item.pageCount} p.`\r\n        : 'No information about the number of pages',\r\n      language: item.textObjects[0]?.language || 'en-us',\r\n    };\r\n  };\r\n\r\n  return {\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = 'GET',\r\n      body = null,\r\n      headers = { 'Content-Type': 'application/json' }\r\n    ) => {\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n      } catch (e) {\r\n        setProcess('error');\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner show\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport './comicsList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Spinner />;\r\n    case 'loading':\r\n      return newItemLoading ? <Component /> : <Spinner />;\r\n    case 'confirmed':\r\n      return <Component />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nconst ComicsList = (props) => {\r\n  const [comicsList, setComicsList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n  const { getAllComics, process, setProcess } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n    \r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllComics(offset)\r\n      .then(onComicsLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  const onComicsLoaded = (newComicsList) => {\r\n    let ended = false;\r\n    if (newComicsList.length < 8) {\r\n      ended = true;\r\n    }\r\n\r\n    const addChar = (index) => {\r\n      if (index < newComicsList.length) {\r\n        setComicsList((comicsList) => [...comicsList, newComicsList[index]]);\r\n        setTimeout(() => addChar(index + 1), 200);\r\n      } else {\r\n        setOffset((offset) => offset + newComicsList.length);\r\n        setNewItemLoading(false);\r\n        setComicsEnded(ended);\r\n      }\r\n    };\r\n\r\n    addChar(0);\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: 'cover' };\r\n      if (\r\n        item.thumbnail ===\r\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\r\n      ) {\r\n        imgStyle = { objectFit: 'unset' };\r\n      }\r\n      return (\r\n        <CSSTransition timeout={500} classNames=\"comics__item\" key={i}>\r\n          <li className=\"comics__item\" key={i}>\r\n            <Link to={`/marvel/comics/${item.id}`}>\r\n              <img\r\n                src={item.thumbnail}\r\n                alt={item.title}\r\n                className=\"comics__item-img\"\r\n                style={imgStyle}\r\n              />\r\n              <div className=\"comics__item-name\">{item.title}</div>\r\n              <div className=\"comics__item-price\">{item.price}</div>\r\n            </Link>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return (\r\n      <TransitionGroup component={'ul'} className=\"comics__grid\">\r\n        {items}\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"comics__list\">\r\n      {setContent(process, () => renderItems(comicsList), newItemLoading)}\r\n\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        onClick={() => onRequest(offset)}\r\n        disabled={newItemLoading}\r\n        style={{ display: comicsEnded ? 'none' : 'block' }}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComicsList;\r\n","import { Helmet } from \"react-helmet\";\r\n\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n    <Helmet>\r\n        <meta name=\"description\" content=\"Page with list of our comics\" />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner />\r\n      <ComicsList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}