{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","request","clearError","process","setProcess","useHttp","useState","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_baseOffset","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","item","_item$textObjects$","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","res","data","results","map","getCharacter","getAllComics","getComic","getCharacterByName","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","_ref","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","loading","onRequest","initial","onCharsLoaded","newCharList","ended","addChar","index","setTimeout","itemRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","elements","useMemo","arr","i","imgStyle","CSSTransition","timeout","classNames","ref","el","onCharSelected","onKeyDown","key","tabIndex","TransitionGroup","component","renderItems","disabled","comicUrl","resourceURI","CharInfo","charId","CharForm","oneChar","setNameChar","errorMessage","color","Link","to","type","Formik","initialValues","text","validationSchema","Yup","required","onSubmit","value","setSubmitting","_ref2","isSubmitting","Form","htmlFor","Field","placeholder","FormikErrorMessage","ErrorBoundary","constructor","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selecedChar","Helmet","content","CharSearchForm"],"mappings":"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","file":"static/js/5.fd97032c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\"/>\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}\r\n        src={img} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=64e87f61f8b009b9b44a4206749f6d05';\r\n  const _baseOffset = 220;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : 'There is no description for this character',\r\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics?limit=8&offset=${offset}&${_apiKey}\r\n    `);\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`\r\n    ${_apiBase}/comics/${id}?${_apiKey}\r\n    `);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (item) => {\r\n    return {\r\n      id: item.id,\r\n      title: item.title,\r\n      thumbnail: item.thumbnail.path + '.' + item.thumbnail.extension,\r\n      price: item.prices[0].price\r\n        ? `${item.prices[0].price}$`\r\n        : `not available`,\r\n      description: item.description || 'There is no description',\r\n      pageCount: item.pageCount\r\n        ? `${item.pageCount} p.`\r\n        : 'No information about the number of pages',\r\n      language: item.textObjects[0]?.language || 'en-us',\r\n    };\r\n  };\r\n\r\n  return {\r\n    getAllCharacters,\r\n    getCharacter,\r\n    clearError,\r\n    process,\r\n    setProcess,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = 'GET',\r\n      body = null,\r\n      headers = { 'Content-Type': 'application/json' }\r\n    ) => {\r\n      setProcess('loading');\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return data;\r\n      } catch (e) {\r\n        setProcess('error');\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n  useEffect(() => {\r\n    updateChar();\r\n    // const timerId = setInterval(updateChar, 6000);\r\n\r\n    // return () => {\r\n    //   clearInterval(timerId);\r\n    \r\n    // };\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    clearError();\r\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    getCharacter(id).then(onCharLoaded).then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  return (\r\n    <div className=\"randomchar\">\r\n      {setContent(process, View, char)}\r\n      <div className=\"randomchar__static\">\r\n        <p className=\"randomchar__title\">\r\n          Random character for today!\r\n          <br />\r\n          Do you want to get to know him better?\r\n        </p>\r\n        <p className=\"randomchar__title\">Or choose another one</p>\r\n        <button className=\"button button__main\" onClick={updateChar}>\r\n          <div className=\"inner\">try it</div>\r\n        </button>\r\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki } = data;\r\n\r\n  return (\r\n    <div className=\"randomchar__block\">\r\n      <img\r\n        src={thumbnail}\r\n        alt=\"Random character\"\r\n        className=\"randomchar__img\"\r\n        style={\r\n          thumbnail ===\r\n          'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\r\n            ? { objectFit: 'contain' }\r\n            : {}\r\n        }\r\n      />\r\n      <div className=\"randomchar__info\">\r\n        <p className=\"randomchar__name\">{name}</p>\r\n        <p className=\"randomchar__descr\">{description}</p>\r\n        <div className=\"randomchar__btns\">\r\n          <a href={homepage} className=\"button button__main\">\r\n            <div className=\"inner\">homepage</div>\r\n          </a>\r\n          <a href={wiki} className=\"button button__secondary\">\r\n            <div className=\"inner\">Wiki</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Spinner />;\r\n    case 'loading':\r\n      return newItemLoading ? <Component /> : <Spinner />;\r\n    case 'confirmed':\r\n      return <Component />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n};\r\n\r\nconst CharList = (props) => {\r\n  const [charList, setCharList] = useState([]);\r\n  const [newItemLoading, setNewItemLoading] = useState(false);\r\n  const [offset, setOffset] = useState(210);\r\n  const [charEnded, setCharEnded] = useState(false);\r\n\r\n  const { loading, getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    onRequest(offset, true);\r\n    // window.addEventListener('scroll', onScroll);\r\n    // return () => {\r\n    // window.removeEventListener('scroll', onScroll);\r\n    // };\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (newItemLoading && !loading) {\r\n      onRequest(offset);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [newItemLoading]);\r\n\r\n  const onRequest = (offset, initial) => {\r\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n    getAllCharacters(offset)\r\n      .then(onCharsLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  const onCharsLoaded = (newCharList) => {\r\n    let ended = false;\r\n    if (newCharList.length < 9) {\r\n      ended = true;\r\n    }\r\n\r\n    const addChar = (index) => {\r\n      if (index < newCharList.length) {\r\n        setCharList((charList) => [...charList, newCharList[index]]);\r\n        setTimeout(() => addChar(index + 1), 100);\r\n      } else {\r\n        setOffset((offset) => offset + newCharList.length);\r\n        setCharEnded(ended);\r\n        setNewItemLoading(false);\r\n      }\r\n    };\r\n    addChar(0);\r\n  };\r\n\r\n  // const onScroll = () => {\r\n  //   if (newItemLoading) return;\r\n  //   if (charEnded) {\r\n  //     window.removeEventListener('scoll', onScroll);\r\n  //   }\r\n  //   if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\r\n  //     // onCharListLoading();\r\n  //     setNewItemLoading(true);\r\n  //   }\r\n  // };\r\n\r\n  const itemRefs = useRef([]);\r\n\r\n  const focusOnItem = (id) => {\r\n    itemRefs.current.forEach((item) => {\r\n      item.classList.remove('char__item_selected');\r\n    });\r\n    itemRefs.current[id].classList.add('char__item_selected');\r\n    itemRefs.current[id].focus();\r\n  };\r\n\r\n  function renderItems(arr) {\r\n    const items = arr.map((item, i) => {\r\n      let imgStyle = { objectFit: 'cover' };\r\n      if (\r\n        item.thumbnail ===\r\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\r\n      ) {\r\n        imgStyle = { objectFit: 'unset' };\r\n      }\r\n\r\n      return (\r\n        <CSSTransition timeout={500} classNames=\"char__item\" key={item.id}>\r\n          <li\r\n            className=\"char__item\"\r\n            key={item.id}\r\n            ref={(el) => (itemRefs.current[i] = el)}\r\n            onClick={() => {\r\n              props.onCharSelected(item.id);\r\n              focusOnItem(i);\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === ' ' || e.key === 'Enter') {\r\n                props.onCharSelected(item.id);\r\n                focusOnItem(i);\r\n              }\r\n            }}\r\n            tabIndex={0}\r\n          >\r\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n            <div className=\"char__name\">{item.name}</div>\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return (\r\n      <TransitionGroup component={'ul'} className=\"char__grid\">\r\n        {items}\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n\r\n  const elements = useMemo(() => {\r\n    return setContent(process, () => renderItems(charList), newItemLoading);\r\n    // eslint-disable-next-line\r\n  }, [process, charList]);\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      {elements}\r\n      <button\r\n        className=\"button button__main button__long\"\r\n        disabled={newItemLoading}\r\n        style={{ display: charEnded ? 'none' : 'block' }}\r\n        onClick={() => setNewItemLoading(true)}\r\n      >\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCharList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CharList;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n  const [char, setChar] = useState(null);\r\n\r\n  const { getCharacter, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    \r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateChar();\r\n    // eslint-disable-next-line\r\n  }, [props.charId]);\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = () => {\r\n    const { charId } = props;\r\n    if (!charId) {\r\n      return;\r\n    }\r\n    clearError();\r\n    getCharacter(charId)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess('confirmed'));\r\n  };\r\n\r\n  return (\r\n    <div className=\"char__info\">\r\n      {setContent(process, View, char)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst View = ({ data }) => {\r\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n\r\n  let imgStyle = { objectFit: 'cover' };\r\n  if (\r\n    thumbnail ===\r\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\r\n  ) {\r\n    imgStyle = { objectFit: 'unset' };\r\n  }\r\n\r\n  if (comics.length === 0) {\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img src={thumbnail} alt={name} style={imgStyle} />\r\n        <div>\r\n          <div className=\"char__info-name\">{name}</div>\r\n          <div className=\"char__btns\">\r\n            <a href={homepage} className=\"button button__main\">\r\n              <div className=\"inner\">homepage</div>\r\n            </a>\r\n            <a href={wiki} className=\"button button__secondary\">\r\n              <div className=\"inner\">wiki</div>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">{description}</div>\r\n      <div className=\"char__comics\">Comics:</div>\r\n      <ul className=\"char__comics-list\">\r\n        {comics.length > 0 ? null : 'Comics not found'}\r\n        {comics.map((item, i) => {\r\n          const comicUrl = item.resourceURI.slice(-5);\r\n          // eslint-disable-next-line\r\n          if (i > 9) return;\r\n          return (\r\n            <li key={i} className=\"char__comics-item\">\r\n              <a href={`/marvel/comics/${comicUrl}`}>{item.name}</a>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nCharInfo.propTypes = {\r\n  charId: PropTypes.number,\r\n};\r\n\r\nexport default CharInfo;\r\n","import { useState } from 'react';\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharForm = () => {\r\n  const [oneChar, setNameChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  const errorMessage = process === 'error' ? <ErrorMessage /> : null;\r\n  const results = !oneChar ? null : oneChar.length > 0 ? (\r\n    <div className=\"char__form-info\">\r\n      <p style={{ color: '#03710E' }}>There is! Visit {oneChar[0].name} page?</p>\r\n      <Link to={`/marvel/character/${oneChar[0].id}`}>\r\n        <div className=\"button button__secondary\" type=\"submit\">\r\n          <div className=\"inner\">TO PAGE</div>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__form-info\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ text: '' }}\r\n      validationSchema={Yup.object({\r\n        text: Yup.string().required('This field is required'),\r\n      })}\r\n      onSubmit={async (value, { setSubmitting }) => {\r\n        clearError();\r\n        await getCharacterByName(value.text)\r\n          .then((char) => setNameChar(char))\r\n          .then(() => setProcess('confirmed'));\r\n        setSubmitting(false);\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form className=\"char__form\">\r\n          <label className=\"char__form-text\" htmlFor=\"text\">\r\n            Or find a character by name:\r\n          </label>\r\n          <Field\r\n            className=\"char__form-field\"\r\n            type=\"text\"\r\n            name=\"text\"\r\n            placeholder=\"Enter name\"\r\n          />\r\n          <button\r\n            className=\"char__form-button button button__main\"\r\n            type=\"submit\"\r\n            disabled={isSubmitting}\r\n          >\r\n            <div className=\"inner\">Find</div>\r\n          </button>\r\n          <FormikErrorMessage\r\n            className=\"char__form-info\"\r\n            name=\"text\"\r\n            component=\"div\"\r\n          />\r\n          {results}\r\n          {errorMessage}\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n// const View = ({ data }) => {\r\n//   const { name, id } = data;\r\n\r\n//   return (\r\n//     <div className=\"char__form-info\">\r\n//       <p style={{ color: '#03710E' }}>There is! Visit {name} page?</p>\r\n//       <Link to={`/marvel/character/${id}`}>\r\n//         <div className=\"button button__secondary\" type=\"submit\">\r\n//           <div className=\"inner\">TO PAGE</div>\r\n//         </div>\r\n//       </Link>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport default CharForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm'\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nconst MainPage = () => {\r\n  const [selecedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div className=\"sticky\">\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selecedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}